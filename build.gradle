/*
Build file partially inspired by Porting-Lib: https://github.com/Fabricators-of-Create/Porting-Lib/blob/63460046a8a06339a7ab79d3db1dcf2ad92b92e0/build.gradle.
 */

//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'gradle-build-utils'
}

Properties props = loadProperties.call('publish.properties')

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "mc${minecraft_version}_v${gitVersion.call()}"
group = project.maven_group

repositories {
    mavenCentral()

    // ModMenu
    maven { url = "https://maven.terraformersmc.com/releases/" }

    // Mappings
    maven { url = "https://maven.parchmentmc.org" }

    // first-party libraries
    maven { url "https://repo.lclpnet.work/repository/internal" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(loom.layered {
        it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // modRuntimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

loom {
    accessWidenerPath = file("src/main/resources/mightyarchitect.accesswidener")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 17
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(targetVersion)
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE.md") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            from components.java

            pom {
                name = 'The Fabric Architect'
                description = 'Design elaborate buildings within a minute!'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}